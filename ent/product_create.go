// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/quavious/golang-docker-forum/ent/category"
	"github.com/quavious/golang-docker-forum/ent/product"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNetPrice sets the "net_price" field.
func (pc *ProductCreate) SetNetPrice(i int) *ProductCreate {
	pc.mutation.SetNetPrice(i)
	return pc
}

// SetSalePrice sets the "sale_price" field.
func (pc *ProductCreate) SetSalePrice(i int) *ProductCreate {
	pc.mutation.SetSalePrice(i)
	return pc
}

// SetDiscountRate sets the "discount_rate" field.
func (pc *ProductCreate) SetDiscountRate(i int) *ProductCreate {
	pc.mutation.SetDiscountRate(i)
	return pc
}

// SetLinkURL sets the "link_url" field.
func (pc *ProductCreate) SetLinkURL(s string) *ProductCreate {
	pc.mutation.SetLinkURL(s)
	return pc
}

// SetImageURL sets the "image_url" field.
func (pc *ProductCreate) SetImageURL(s string) *ProductCreate {
	pc.mutation.SetImageURL(s)
	return pc
}

// SetCompany sets the "company" field.
func (pc *ProductCreate) SetCompany(s string) *ProductCreate {
	pc.mutation.SetCompany(s)
	return pc
}

// SetExpiredAt sets the "expired_at" field.
func (pc *ProductCreate) SetExpiredAt(t time.Time) *ProductCreate {
	pc.mutation.SetExpiredAt(t)
	return pc
}

// SetID sets the "id" field.
func (pc *ProductCreate) SetID(s string) *ProductCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetBelongsID sets the "belongs" edge to the Category entity by ID.
func (pc *ProductCreate) SetBelongsID(id int) *ProductCreate {
	pc.mutation.SetBelongsID(id)
	return pc
}

// SetNillableBelongsID sets the "belongs" edge to the Category entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableBelongsID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetBelongsID(*id)
	}
	return pc
}

// SetBelongs sets the "belongs" edge to the Category entity.
func (pc *ProductCreate) SetBelongs(c *Category) *ProductCreate {
	return pc.SetBelongsID(c.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := pc.mutation.NetPrice(); !ok {
		return &ValidationError{Name: "net_price", err: errors.New("ent: missing required field \"net_price\"")}
	}
	if _, ok := pc.mutation.SalePrice(); !ok {
		return &ValidationError{Name: "sale_price", err: errors.New("ent: missing required field \"sale_price\"")}
	}
	if _, ok := pc.mutation.DiscountRate(); !ok {
		return &ValidationError{Name: "discount_rate", err: errors.New("ent: missing required field \"discount_rate\"")}
	}
	if _, ok := pc.mutation.LinkURL(); !ok {
		return &ValidationError{Name: "link_url", err: errors.New("ent: missing required field \"link_url\"")}
	}
	if v, ok := pc.mutation.LinkURL(); ok {
		if err := product.LinkURLValidator(v); err != nil {
			return &ValidationError{Name: "link_url", err: fmt.Errorf("ent: validator failed for field \"link_url\": %w", err)}
		}
	}
	if _, ok := pc.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New("ent: missing required field \"image_url\"")}
	}
	if v, ok := pc.mutation.ImageURL(); ok {
		if err := product.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf("ent: validator failed for field \"image_url\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Company(); !ok {
		return &ValidationError{Name: "company", err: errors.New("ent: missing required field \"company\"")}
	}
	if v, ok := pc.mutation.Company(); ok {
		if err := product.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf("ent: validator failed for field \"company\": %w", err)}
		}
	}
	if _, ok := pc.mutation.ExpiredAt(); !ok {
		return &ValidationError{Name: "expired_at", err: errors.New("ent: missing required field \"expired_at\"")}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := product.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: product.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.NetPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldNetPrice,
		})
		_node.NetPrice = value
	}
	if value, ok := pc.mutation.SalePrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldSalePrice,
		})
		_node.SalePrice = value
	}
	if value, ok := pc.mutation.DiscountRate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldDiscountRate,
		})
		_node.DiscountRate = value
	}
	if value, ok := pc.mutation.LinkURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldLinkURL,
		})
		_node.LinkURL = value
	}
	if value, ok := pc.mutation.ImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldImageURL,
		})
		_node.ImageURL = value
	}
	if value, ok := pc.mutation.Company(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldCompany,
		})
		_node.Company = value
	}
	if value, ok := pc.mutation.ExpiredAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldExpiredAt,
		})
		_node.ExpiredAt = value
	}
	if nodes := pc.mutation.BelongsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.BelongsTable,
			Columns: []string{product.BelongsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
