// Code generated by entc, DO NOT EDIT.

package product

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNetPrice holds the string denoting the net_price field in the database.
	FieldNetPrice = "net_price"
	// FieldSalePrice holds the string denoting the sale_price field in the database.
	FieldSalePrice = "sale_price"
	// FieldDiscountRate holds the string denoting the discount_rate field in the database.
	FieldDiscountRate = "discount_rate"
	// FieldLinkURL holds the string denoting the link_url field in the database.
	FieldLinkURL = "link_url"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldCompany holds the string denoting the company field in the database.
	FieldCompany = "company"
	// FieldExpiredAt holds the string denoting the expired_at field in the database.
	FieldExpiredAt = "expired_at"

	// EdgeBelongs holds the string denoting the belongs edge name in mutations.
	EdgeBelongs = "belongs"

	// Table holds the table name of the product in the database.
	Table = "products"
	// BelongsTable is the table the holds the belongs relation/edge.
	BelongsTable = "products"
	// BelongsInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	BelongsInverseTable = "categories"
	// BelongsColumn is the table column denoting the belongs relation/edge.
	BelongsColumn = "category_contains"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNetPrice,
	FieldSalePrice,
	FieldDiscountRate,
	FieldLinkURL,
	FieldImageURL,
	FieldCompany,
	FieldExpiredAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Product type.
var ForeignKeys = []string{
	"category_contains",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// LinkURLValidator is a validator for the "link_url" field. It is called by the builders before save.
	LinkURLValidator func(string) error
	// ImageURLValidator is a validator for the "image_url" field. It is called by the builders before save.
	ImageURLValidator func(string) error
	// CompanyValidator is a validator for the "company" field. It is called by the builders before save.
	CompanyValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
